{"version":3,"sources":["states.provider.js"],"names":[],"mappings":";;;AAGA,MAAM,cAAc,CAAC;;AAEjB,eAAW,GAAG;AACV,YAAI,CAAC,MAAM,GAAG,SAAS,CAAC;AACxB,YAAI,CAAC,MAAM,GAAG,CACV,MAAM,EACN,aAAa,EACb,WAAW,EACX,iBAAiB,EACjB,sBAAsB,EACtB,cAAc,EACd,gBAAgB,EAChB,uBAAuB,CAC1B,CAAC;KACL;;;;;;AAAA,AAMD,aAAS,CAAC,KAAK,EAAE;AACb,YAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACvB;;;;;;;;;AAAA,AASD,QAAI,CAAC,QAAQ,EAAE;AACX,YAAI,KAAK,GAAG,CAAC,CAAC;AACd,gBAAQ,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,uDAAuD,CAAC,EAAE,GAAG,CAAC,CAAC;;AAE1F,eAAO;AACH,wBAAY,EAAE,MAAM;AAChB,oBAAI,YAAY,CAAC;;AAEjB,oBAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;AAC5B,gCAAY,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBACrC,MAAM;AACH,gCAAY,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;iBACtD;;AAED,qBAAK,EAAG,CAAC;AACT,uBAAO,YAAY,CAAC;aACvB;AACD,qBAAS,EAAE,MAAM,IAAI,CAAC,MAAM;SAC/B,CAAC;KACL;CACJ;;AAED,QAAQ,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC","file":"states.provider-compiled.js","sourcesContent":["/**\n * Created by LamDo on 1/3/16.\n */\nclass StatesProvider {\n\n    constructor() {\n        this.prefix = \"You are\";\n        this.states = [\n            'okay',\n            'not too bad',\n            'contented',\n            'quite satisfied',\n            'moderately gratified',\n            'well chuffed',\n            'highly pleased',\n            'highly pleased indeed'\n        ];\n    }\n\n    /**\n     * This method allows the prefix value to be configured at runtime.\n     * @param value\n     */\n    setPrefix(value) {\n        this.prefix = value;\n    }\n\n    /**\n     * The `$get` method is a requirement of the Angular provider registration API, and is a factory function that\n     * returns our service object.\n     *\n     * @returns {{getNextState: Function, getPrefix: Function}}\n     */\n    /*@ngInject*/\n    $get($timeout) {\n        var index = 0;\n        $timeout(() => console.log('This is the statesProvider $get method being invoked.'), 100);\n\n        return {\n            getNextState: () => {\n                var currentState;\n\n                if (index < this.states.length) {\n                    currentState = this.states[index];\n                } else {\n                    currentState = this.states[this.states.length - 1];\n                }\n\n                index ++;\n                return currentState;\n            },\n            getPrefix: () => this.prefix\n        };\n    }\n}\n\nregister('app').provider('states', StatesProvider);"]}